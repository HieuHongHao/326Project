#!/usr/bin/env node

/**
u* Module dependencies.
 */

const app = require('../server'); 
const debug = require('debug')('refractor:server');
const http = require('http');
const userModel = require('../routes/backend/models/User');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '9000');
app.set('port', port);



/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


const options = {
  cors: {
    origin: "*",
    method: ["GET", "PUT", "POST"],
  },
};
const io = (module.exports.io = require("socket.io")(server, options));
const sockets = {};
const usernames = {};
const inbox = {};
const userAvatar = {};
io.on("connection", (socket) => {
  socket.on("login", async (username) => {
    sockets[username] = socket;
    usernames[socket.id] = username;
    const user = await userModel.findById(username).select("avatar username");
    if(user){
      userAvatar[username] = user.avatar;
    }
    console.log(userAvatar);
    io.emit("receiveOnlineUsersAvatar",userAvatar);
    io.emit("receiveNewUserAlert",user.username,userAvatar[username]);
  });
  if (usernames[socket.id] in inbox && inbox[usernames[socket.id]]) {
    const username = usernames[socket.id];
    sockets[username].emit("inbox-message", inbox[username]);
    inbox[username] = null;
  }
  socket.on("drawing", (data) => socket.broadcast.emit("drawing", data));
  socket.on("chat-message", (data) =>
    socket.broadcast.emit("chat-message", data)
  );
  
  socket.on("disconnect", () => {
    const username = usernames[socket.id];
    delete sockets[username];
    delete usernames[socket.id];
    delete userAvatar[username];
    io.emit("deleteLeftUser",username);
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
