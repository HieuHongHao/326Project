#!/usr/bin/env node

/**
u* Module dependencies.
 */

const app = require('../server'); 
const debug = require('debug')('refractor:server');
const http = require('http');
const userModel = require('../routes/backend/models/User');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '9000');
app.set('port', port);



/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


const options = {
  cors: {
    origin: "*",
    method: ["GET", "PUT", "POST"],
  },
};
const io = (module.exports.io = require("socket.io")(server, options));
const sockets = {};
const usernames = {};
const userAvatars = {};

// Dictionary mapping from socket id to canvasID
const sockets_to_rooms = {};

// This will store the data of each canvas, with the key being canvasID
// The data stored in each canvas is drawing and list of online users
const roomsData = {};

io.on("connection", (socket) => {
  socket.on("login", async (username, canvasID) => {
    sockets[username] = socket;
    usernames[socket.id] = username;
    sockets_to_rooms[socket.id] = canvasID;
    // If canvasId doesnt exist in dictionary, initialzie with empty drawing and list of current users
    if(!(canvasID in roomsData)){
      roomsData[canvasID] = {
        drawing: null,
        users: []
      }
    }
    const user = await userModel.findById(username).select("avatar username");
    console.log(sockets_to_rooms,roomsData);
    if(user){
      roomsData[canvasID].users.push(user);
    }
    // subscribe a socket to a room, so we dont need to pass canvasID other events
    socket.join(canvasID);
    // broadcase necessary events to all other sockets when a new user join the room
    io.in(canvasID).emit("receiveOnlineUsersAvatar",roomsData[canvasID]["users"]);
    io.in(canvasID).emit("receiveNewUserAlert",user);
  });
  socket.on("drawing", (data) => socket.broadcast.emit("drawing", data));
  socket.on("chat-message", (data) =>
    socket.broadcast.emit("chat-message", data)
  );
  socket.on("disconnect", () => {
    console.log(socket.id);
    const username = usernames[socket.id];
    const canvasID = sockets_to_rooms[socket.id];
    if(canvasID && username){
      roomsData[canvasID]["users"] =  roomsData[canvasID]["users"].filter(user => user.id != username);
      delete sockets[username];
      delete usernames[socket.id];
      delete userAvatars[username];
      delete sockets_to_rooms[socket.id];
      socket.leave(canvasID);
      io.in(canvasID).emit("deleteLeftUser",username);
    }
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
